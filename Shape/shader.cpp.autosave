#include "shader.h"

Shader::Shader()
{

}

Shader::~Shader(){

}

GLuint Shader::getProgramID(){
    if(!createProgram) {
        program = glCreateProgram();
        createProgram = true;
    }
    return program;
}

string Shader::readFile(const char *filename){
    ifstream in(filename, ios::in);
    std::stringstream  sb;
    sb << in.rdbuf();
    return string(sb.str());
}

GLuint createShader(GLenum type,const char*source,GLint&success){
    GLuint shader = glCreateShader(type);
    glShaderSource(shader, 1, &source , NULL);
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);

    if (!success)
    {
        char info[300];
        glGetShaderInfoLog(fragmentShader, 512, NULL, info);
        cout << "ERROR::SHADER::FRAGMENT 2::COMPILATION_FAILED\n" << info;
    }
    else
    {
        cout << "Fragment Shader 2 compile success!";
    }
}

bool Shader::loadFragCode(const char *source){

    GLint succsee = 0;
    GLuint shader = createShader(GL_FRAGMENT_SHADER,source,&succsee);
    if(succsee==0) return false;
    else {
        GLuint pro = getProgramID();
        glAttachShader(pro, shader);
    }
}


bool Shader::loadFragFile(const char *filename){
    string code = readFile(filename);
    return loadFragCode(code.c_str());
}


bool Shader::loadVertexCode(const char *source){
    GLint succsee = 0;
    GLuint shader = createShader(GL_VERTEX_SHADER,source,&succsee);
    if(succsee==0) return false;
    else {
        GLuint pro = getProgramID();
        glAttachShader(pro, shader);
    }
}

bool Shader::loadVertexFile(const char *filename){
    string code = readFile(filename);
    return loadVertexCode(code.c_str());
}

GLint Shader::getParamID(string &pNm){
    map<string,GLuint>::iterator it = paramsMap.find(pNm);
    if(it!= paramsMap.end()){
        return it->second();
    }else{
        GLint idx = glGetUniformLocation(program,pNm.c_str());
        paramsMap.insert(pNm,idx);
    }
}


bool Shader::link(){
    glLinkProgram(program);

    GLint success;
    char info[200];
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, info);
        cout << "ERROR::SHADER::PROGRAM 2::LINKING_FAILED\n" << info;
        return false;
    }
    else
    {
        cout << "Link Program2 success!";
        return true;
    }
}

bool Shader::active(){
    glUseProgram(program);
}
